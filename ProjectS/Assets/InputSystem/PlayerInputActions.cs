//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""ByBike"",
            ""id"": ""237b9926-1a35-43b9-b927-369176b0863b"",
            ""actions"": [
                {
                    ""name"": ""Drive"",
                    ""type"": ""Button"",
                    ""id"": ""53c0675d-01ed-42f4-88d9-be3ce060ea9f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TurnaroundLeftStart"",
                    ""type"": ""Button"",
                    ""id"": ""a91d4319-572d-40cb-af1c-deaa8ab716aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TurnaroundLeftEnd"",
                    ""type"": ""Button"",
                    ""id"": ""64373c15-ab91-400a-8acc-dc84df24b9d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TurnaroundRightStart"",
                    ""type"": ""Button"",
                    ""id"": ""de0e6a73-b722-490d-9b09-919cdb8c4abf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TurnaroundRightEnd"",
                    ""type"": ""Button"",
                    ""id"": ""fde4ea36-1f00-4eca-8c78-7885e189a8fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""8aaeea26-9b67-43dc-9096-527b34fc0d19"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WS"",
                    ""id"": ""50348043-0a36-480e-b785-04ebd0daa71d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c2d35cec-f137-44c1-8ce6-db3a37009f3f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""81409e8f-2361-42f9-8e71-6f411ad704ef"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Joystick"",
                    ""id"": ""7b9ca6a8-20a7-46c0-9073-8f1311ddcf7a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8571ef47-05ff-4667-aa2c-a9647ac83296"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4019394f-9b04-4bff-9594-1c16d1a7ac81"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2c5daf3c-b629-4c3f-bd6b-3a7088360e75"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83cf0d4a-02f9-419a-86c4-db42bd7c686d"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b39d290f-d74d-40f9-a3ed-4137d8fbdc6d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnaroundLeftStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77a3b052-bdb2-427f-989a-c054bac5c8ae"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnaroundLeftStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4968816-b266-4df4-889b-640f13cb8e60"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnaroundRightStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07a70026-94a6-4584-b5d5-8352a58cc6e8"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnaroundRightStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ddb04d8-d14a-4e79-a29d-b2927984b7bd"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnaroundLeftEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05e88f2e-7cd4-4352-8bf9-2bd5886bc7f1"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnaroundLeftEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7646f2c-3ad1-4085-be19-4d83bb0685bc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnaroundRightEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9312e447-457b-4546-b151-f29bffc70bd9"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnaroundRightEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ByBike
        m_ByBike = asset.FindActionMap("ByBike", throwIfNotFound: true);
        m_ByBike_Drive = m_ByBike.FindAction("Drive", throwIfNotFound: true);
        m_ByBike_TurnaroundLeftStart = m_ByBike.FindAction("TurnaroundLeftStart", throwIfNotFound: true);
        m_ByBike_TurnaroundLeftEnd = m_ByBike.FindAction("TurnaroundLeftEnd", throwIfNotFound: true);
        m_ByBike_TurnaroundRightStart = m_ByBike.FindAction("TurnaroundRightStart", throwIfNotFound: true);
        m_ByBike_TurnaroundRightEnd = m_ByBike.FindAction("TurnaroundRightEnd", throwIfNotFound: true);
        m_ByBike_Look = m_ByBike.FindAction("Look", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ByBike
    private readonly InputActionMap m_ByBike;
    private List<IByBikeActions> m_ByBikeActionsCallbackInterfaces = new List<IByBikeActions>();
    private readonly InputAction m_ByBike_Drive;
    private readonly InputAction m_ByBike_TurnaroundLeftStart;
    private readonly InputAction m_ByBike_TurnaroundLeftEnd;
    private readonly InputAction m_ByBike_TurnaroundRightStart;
    private readonly InputAction m_ByBike_TurnaroundRightEnd;
    private readonly InputAction m_ByBike_Look;
    public struct ByBikeActions
    {
        private @PlayerInputActions m_Wrapper;
        public ByBikeActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Drive => m_Wrapper.m_ByBike_Drive;
        public InputAction @TurnaroundLeftStart => m_Wrapper.m_ByBike_TurnaroundLeftStart;
        public InputAction @TurnaroundLeftEnd => m_Wrapper.m_ByBike_TurnaroundLeftEnd;
        public InputAction @TurnaroundRightStart => m_Wrapper.m_ByBike_TurnaroundRightStart;
        public InputAction @TurnaroundRightEnd => m_Wrapper.m_ByBike_TurnaroundRightEnd;
        public InputAction @Look => m_Wrapper.m_ByBike_Look;
        public InputActionMap Get() { return m_Wrapper.m_ByBike; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ByBikeActions set) { return set.Get(); }
        public void AddCallbacks(IByBikeActions instance)
        {
            if (instance == null || m_Wrapper.m_ByBikeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ByBikeActionsCallbackInterfaces.Add(instance);
            @Drive.started += instance.OnDrive;
            @Drive.performed += instance.OnDrive;
            @Drive.canceled += instance.OnDrive;
            @TurnaroundLeftStart.started += instance.OnTurnaroundLeftStart;
            @TurnaroundLeftStart.performed += instance.OnTurnaroundLeftStart;
            @TurnaroundLeftStart.canceled += instance.OnTurnaroundLeftStart;
            @TurnaroundLeftEnd.started += instance.OnTurnaroundLeftEnd;
            @TurnaroundLeftEnd.performed += instance.OnTurnaroundLeftEnd;
            @TurnaroundLeftEnd.canceled += instance.OnTurnaroundLeftEnd;
            @TurnaroundRightStart.started += instance.OnTurnaroundRightStart;
            @TurnaroundRightStart.performed += instance.OnTurnaroundRightStart;
            @TurnaroundRightStart.canceled += instance.OnTurnaroundRightStart;
            @TurnaroundRightEnd.started += instance.OnTurnaroundRightEnd;
            @TurnaroundRightEnd.performed += instance.OnTurnaroundRightEnd;
            @TurnaroundRightEnd.canceled += instance.OnTurnaroundRightEnd;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(IByBikeActions instance)
        {
            @Drive.started -= instance.OnDrive;
            @Drive.performed -= instance.OnDrive;
            @Drive.canceled -= instance.OnDrive;
            @TurnaroundLeftStart.started -= instance.OnTurnaroundLeftStart;
            @TurnaroundLeftStart.performed -= instance.OnTurnaroundLeftStart;
            @TurnaroundLeftStart.canceled -= instance.OnTurnaroundLeftStart;
            @TurnaroundLeftEnd.started -= instance.OnTurnaroundLeftEnd;
            @TurnaroundLeftEnd.performed -= instance.OnTurnaroundLeftEnd;
            @TurnaroundLeftEnd.canceled -= instance.OnTurnaroundLeftEnd;
            @TurnaroundRightStart.started -= instance.OnTurnaroundRightStart;
            @TurnaroundRightStart.performed -= instance.OnTurnaroundRightStart;
            @TurnaroundRightStart.canceled -= instance.OnTurnaroundRightStart;
            @TurnaroundRightEnd.started -= instance.OnTurnaroundRightEnd;
            @TurnaroundRightEnd.performed -= instance.OnTurnaroundRightEnd;
            @TurnaroundRightEnd.canceled -= instance.OnTurnaroundRightEnd;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(IByBikeActions instance)
        {
            if (m_Wrapper.m_ByBikeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IByBikeActions instance)
        {
            foreach (var item in m_Wrapper.m_ByBikeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ByBikeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ByBikeActions @ByBike => new ByBikeActions(this);
    public interface IByBikeActions
    {
        void OnDrive(InputAction.CallbackContext context);
        void OnTurnaroundLeftStart(InputAction.CallbackContext context);
        void OnTurnaroundLeftEnd(InputAction.CallbackContext context);
        void OnTurnaroundRightStart(InputAction.CallbackContext context);
        void OnTurnaroundRightEnd(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
}
