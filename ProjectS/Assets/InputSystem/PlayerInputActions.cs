//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""OnBike"",
            ""id"": ""f47be93d-ada9-4fd7-a72d-d74abf9218ea"",
            ""actions"": [
                {
                    ""name"": ""Drive"",
                    ""type"": ""Button"",
                    ""id"": ""5249e6d1-6698-4487-893c-3dec431ca10c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Break"",
                    ""type"": ""Button"",
                    ""id"": ""6595ecee-f30d-4b54-819d-368125bd102b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Steer"",
                    ""type"": ""Value"",
                    ""id"": ""e5b75ff3-2086-4d62-b52f-6c7e28db44a2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""0dc20f23-cf63-4e19-aef5-b2d06c8a6d26"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""4c0a484d-4ea0-49a1-be97-ff547c4ad488"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dbfd5758-1da3-462f-b53b-b7a9f742b09d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6841182-2d10-4ba3-9d5b-1769eec4e7aa"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Break"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""d197fb02-0eee-4dfc-a51b-1a5585932925"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3d695a0f-bf6e-4f59-8340-5a6c92e8ff42"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2136620a-393e-4b31-ae9c-5ff6adb93842"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""618783de-15ad-4559-9ee5-54d2abc90905"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b342b404-4383-4333-8df4-043a82d0135a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c128281f-2a94-43b0-8b78-4501ae001284"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // OnBike
        m_OnBike = asset.FindActionMap("OnBike", throwIfNotFound: true);
        m_OnBike_Drive = m_OnBike.FindAction("Drive", throwIfNotFound: true);
        m_OnBike_Break = m_OnBike.FindAction("Break", throwIfNotFound: true);
        m_OnBike_Steer = m_OnBike.FindAction("Steer", throwIfNotFound: true);
        m_OnBike_Interact = m_OnBike.FindAction("Interact", throwIfNotFound: true);
        m_OnBike_Pause = m_OnBike.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // OnBike
    private readonly InputActionMap m_OnBike;
    private List<IOnBikeActions> m_OnBikeActionsCallbackInterfaces = new List<IOnBikeActions>();
    private readonly InputAction m_OnBike_Drive;
    private readonly InputAction m_OnBike_Break;
    private readonly InputAction m_OnBike_Steer;
    private readonly InputAction m_OnBike_Interact;
    private readonly InputAction m_OnBike_Pause;
    public struct OnBikeActions
    {
        private @PlayerInputActions m_Wrapper;
        public OnBikeActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Drive => m_Wrapper.m_OnBike_Drive;
        public InputAction @Break => m_Wrapper.m_OnBike_Break;
        public InputAction @Steer => m_Wrapper.m_OnBike_Steer;
        public InputAction @Interact => m_Wrapper.m_OnBike_Interact;
        public InputAction @Pause => m_Wrapper.m_OnBike_Pause;
        public InputActionMap Get() { return m_Wrapper.m_OnBike; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnBikeActions set) { return set.Get(); }
        public void AddCallbacks(IOnBikeActions instance)
        {
            if (instance == null || m_Wrapper.m_OnBikeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnBikeActionsCallbackInterfaces.Add(instance);
            @Drive.started += instance.OnDrive;
            @Drive.performed += instance.OnDrive;
            @Drive.canceled += instance.OnDrive;
            @Break.started += instance.OnBreak;
            @Break.performed += instance.OnBreak;
            @Break.canceled += instance.OnBreak;
            @Steer.started += instance.OnSteer;
            @Steer.performed += instance.OnSteer;
            @Steer.canceled += instance.OnSteer;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IOnBikeActions instance)
        {
            @Drive.started -= instance.OnDrive;
            @Drive.performed -= instance.OnDrive;
            @Drive.canceled -= instance.OnDrive;
            @Break.started -= instance.OnBreak;
            @Break.performed -= instance.OnBreak;
            @Break.canceled -= instance.OnBreak;
            @Steer.started -= instance.OnSteer;
            @Steer.performed -= instance.OnSteer;
            @Steer.canceled -= instance.OnSteer;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IOnBikeActions instance)
        {
            if (m_Wrapper.m_OnBikeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnBikeActions instance)
        {
            foreach (var item in m_Wrapper.m_OnBikeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnBikeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnBikeActions @OnBike => new OnBikeActions(this);
    public interface IOnBikeActions
    {
        void OnDrive(InputAction.CallbackContext context);
        void OnBreak(InputAction.CallbackContext context);
        void OnSteer(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
